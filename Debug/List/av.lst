
AVRASM ver. 2.1.30  F:\Proteus project\avr_keyboard2\Debug\List\av.asm Mon Jan 16 07:05:53 2023

F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1088): warning: Register r4 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1089): warning: Register r5 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1090): warning: Register r6 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1091): warning: Register r7 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1092): warning: Register r8 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1093): warning: Register r9 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1094): warning: Register r10 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1095): warning: Register r11 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1096): warning: Register r12 already defined by the .DEF directive
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _number1=R4
                 	.DEF _number1_msb=R5
                 	.DEF _number2=R6
                 	.DEF _number2_msb=R7
                 	.DEF _column=R8
                 	.DEF _column_msb=R9
                 	.DEF _key=R10
                 	.DEF _key_msb=R11
                 	.DEF _temp=R12
                 	.DEF _temp_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005b 	JMP  __RESET
000002 940c 0088 	JMP  _KEY_PRESS
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 000d      	.DB  0x0,0x0,0xD,0x0
                 
                 _0x3:
000037 3837
000038 2f39
000039 3534
00003a 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
00003b 3231
00003c 2d33
00003d 3043
00003e 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 _0x4:
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1143): warning: .cseg .db misalignment - padding zero byte
00003f 0020      	.DB  0x20
                 _0x0:
000040 6425
000041 4400
000042 7669
000043 6469      	.DB  0x25,0x64,0x0,0x44,0x69,0x76,0x69,0x64
000044 2065
000045 7942
000046 5a20
000047 7265      	.DB  0x65,0x20,0x42,0x79,0x20,0x5A,0x65,0x72
000048 216f
F:\Proteus project\avr_keyboard2\Debug\List\av.asm(1147): warning: .cseg .db misalignment - padding zero byte
000049 0000      	.DB  0x6F,0x21,0x0
                 _0x2000003:
00004a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00004b 0008      	.DW  0x08
00004c 0004      	.DW  0x04
00004d 0066      	.DW  __REG_VARS*2
                 
00004e 0010      	.DW  0x10
00004f 0270      	.DW  _alpha
000050 006e      	.DW  _0x3*2
                 
000051 0001      	.DW  0x01
000052 02a1      	.DW  _last_operation
000053 007e      	.DW  _0x4*2
                 
000054 0010      	.DW  0x10
000055 0260      	.DW  _0x28
000056 0083      	.DW  _0x0*2+3
                 
000057 0002      	.DW  0x02
000058 02a2      	.DW  __base_y_G100
000059 0094      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00005a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005b 94f8      	CLI
00005c 27ee      	CLR  R30
00005d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005e e0f1      	LDI  R31,1
00005f bffb      	OUT  GICR,R31
000060 bfeb      	OUT  GICR,R30
000061 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000062 e08d      	LDI  R24,(14-2)+1
000063 e0a2      	LDI  R26,2
000064 27bb      	CLR  R27
                 __CLEAR_REG:
000065 93ed      	ST   X+,R30
000066 958a      	DEC  R24
000067 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000068 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000069 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006b 93ed      	ST   X+,R30
00006c 9701      	SBIW R24,1
00006d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00006e e9e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00006f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000070 9185      	LPM  R24,Z+
000071 9195      	LPM  R25,Z+
000072 9700      	SBIW R24,0
000073 f061      	BREQ __GLOBAL_INI_END
000074 91a5      	LPM  R26,Z+
000075 91b5      	LPM  R27,Z+
000076 9005      	LPM  R0,Z+
000077 9015      	LPM  R1,Z+
000078 01bf      	MOVW R22,R30
000079 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007a 9005      	LPM  R0,Z+
00007b 920d      	ST   X+,R0
00007c 9701      	SBIW R24,1
00007d f7e1      	BRNE __GLOBAL_INI_LOOP
00007e 01fb      	MOVW R30,R22
00007f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000080 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000081 bfed      	OUT  SPL,R30
000082 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000083 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000084 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000085 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000086 940c 0144 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;void calc(void);
                 ;
                 ;char alpha[] = {'7', '8', '9', '/', '4', '5', '6', '*', '1', '2', '3', '-', 'C', '0', '=', '+', ''};
                 
                 	.DSEG
                 ;char number_string[32] = {'\0'};
                 ;int number1=0, number2=0;
                 ;int column=0,key=13, temp;
                 ;char last_operation = ' ';
                 ;interrupt [EXT_INT0] void KEY_PRESS(void)
                 ; 0000 000E {
                 
                 	.CSEG
                 _KEY_PRESS:
                 ; .FSTART _KEY_PRESS
000088 920a      	ST   -Y,R0
000089 921a      	ST   -Y,R1
00008a 92fa      	ST   -Y,R15
00008b 936a      	ST   -Y,R22
00008c 937a      	ST   -Y,R23
00008d 938a      	ST   -Y,R24
00008e 939a      	ST   -Y,R25
00008f 93aa      	ST   -Y,R26
000090 93ba      	ST   -Y,R27
000091 93ea      	ST   -Y,R30
000092 93fa      	ST   -Y,R31
000093 b7ef      	IN   R30,SREG
000094 93ea      	ST   -Y,R30
                 ; 0000 000F     PORTC=0X00;
000095 e0e0      	LDI  R30,LOW(0)
000096 bbe5      	OUT  0x15,R30
                 ; 0000 0010     delay_ms(1);
000097 e0a1      	LDI  R26,LOW(1)
000098 e0b0      	LDI  R27,0
000099 940e 0442 	CALL _delay_ms
                 ; 0000 0011 
                 ; 0000 0012     for(column=1,temp=1;column<=4;temp*=2,column++)
00009b e0e1      	LDI  R30,LOW(1)
00009c e0f0      	LDI  R31,HIGH(1)
00009d 014f      	MOVW R8,R30
00009e 016f      	MOVW R12,R30
                 _0x6:
00009f e0e4      	LDI  R30,LOW(4)
0000a0 e0f0      	LDI  R31,HIGH(4)
0000a1 15e8      	CP   R30,R8
0000a2 05f9      	CPC  R31,R9
0000a3 f124      	BRLT _0x7
                 ; 0000 0013     {
                 ; 0000 0014         PORTA&=0XF0;
0000a4 b3eb      	IN   R30,0x1B
0000a5 7fe0      	ANDI R30,LOW(0xF0)
0000a6 bbeb      	OUT  0x1B,R30
                 ; 0000 0015         PORTA|=temp;
0000a7 b3eb      	IN   R30,0x1B
0000a8 29ec      	OR   R30,R12
0000a9 bbeb      	OUT  0x1B,R30
                 ; 0000 0016         switch(PINC&0X0F)
0000aa b3e3      	IN   R30,0x13
0000ab 70ef      	ANDI R30,LOW(0xF)
                 ; 0000 0017         {
                 ; 0000 0018             case 0X01:{
0000ac 30e1      	CPI  R30,LOW(0x1)
0000ad f411      	BRNE _0xB
                 ; 0000 0019                         key=column;
0000ae 0154      	MOVW R10,R8
                 ; 0000 001A                       }break;
0000af c00f      	RJMP _0xA
                 ; 0000 001B             case 0X02:{
                 _0xB:
0000b0 30e2      	CPI  R30,LOW(0x2)
0000b1 f419      	BRNE _0xC
                 ; 0000 001C                         key=4+column;
0000b2 01f4      	MOVW R30,R8
0000b3 9634      	ADIW R30,4
0000b4 c009      	RJMP _0x2A
                 ; 0000 001D                       }break;
                 ; 0000 001E             case 0X04:{
                 _0xC:
0000b5 30e4      	CPI  R30,LOW(0x4)
0000b6 f419      	BRNE _0xD
                 ; 0000 001F                         key=8+column;
0000b7 01f4      	MOVW R30,R8
0000b8 9638      	ADIW R30,8
0000b9 c004      	RJMP _0x2A
                 ; 0000 0020                       }break;
                 ; 0000 0021             case 0X08:{
                 _0xD:
0000ba 30e8      	CPI  R30,LOW(0x8)
0000bb f419      	BRNE _0xA
                 ; 0000 0022                         key=12+column;
0000bc 01f4      	MOVW R30,R8
0000bd 963c      	ADIW R30,12
                 _0x2A:
0000be 015f      	MOVW R10,R30
                 ; 0000 0023                       }break;
                 ; 0000 0024         }
                 _0xA:
                 ; 0000 0025         do{}while((PINC&0X0F)!=0);
                 _0x10:
0000bf b3e3      	IN   R30,0x13
0000c0 70ef      	ANDI R30,LOW(0xF)
0000c1 f7e9      	BRNE _0x10
                 ; 0000 0026     }
0000c2 0ccc      	LSL  R12
0000c3 1cdd      	ROL  R13
0000c4 01f4      	MOVW R30,R8
0000c5 9631      	ADIW R30,1
0000c6 014f      	MOVW R8,R30
0000c7 cfd7      	RJMP _0x6
                 _0x7:
                 ; 0000 0027 
                 ; 0000 0028     PORTA|=0X0F;
0000c8 b3eb      	IN   R30,0x1B
0000c9 60ef      	ORI  R30,LOW(0xF)
0000ca bbeb      	OUT  0x1B,R30
                 ; 0000 0029     key = key-1;
0000cb 01f5      	MOVW R30,R10
0000cc 9731      	SBIW R30,1
0000cd 015f      	MOVW R10,R30
                 ; 0000 002A 
                 ; 0000 002B     switch(alpha[key])
0000ce 940e 03f3 	CALL SUBOPT_0x0
                 ; 0000 002C     {
                 ; 0000 002D         case '*':
0000d0 32ea      	CPI  R30,LOW(0x2A)
0000d1 e0a0      	LDI  R26,HIGH(0x2A)
0000d2 07fa      	CPC  R31,R26
0000d3 f431      	BRNE _0x15
                 ; 0000 002E         {
                 ; 0000 002F             calc();
0000d4 d081      	RCALL _calc
                 ; 0000 0030             last_operation = '*';
0000d5 e2ea      	LDI  R30,LOW(42)
0000d6 93e0 02a1 	STS  _last_operation,R30
                 ; 0000 0031             lcd_putchar('*');
0000d8 e2aa      	LDI  R26,LOW(42)
0000d9 c05b      	RJMP _0x2B
                 ; 0000 0032             break;
                 ; 0000 0033         }
                 ; 0000 0034         case '+':
                 _0x15:
0000da 32eb      	CPI  R30,LOW(0x2B)
0000db e0a0      	LDI  R26,HIGH(0x2B)
0000dc 07fa      	CPC  R31,R26
0000dd f431      	BRNE _0x16
                 ; 0000 0035         {
                 ; 0000 0036             calc();
0000de d077      	RCALL _calc
                 ; 0000 0037             last_operation = '+';
0000df e2eb      	LDI  R30,LOW(43)
0000e0 93e0 02a1 	STS  _last_operation,R30
                 ; 0000 0038             lcd_putchar('+');
0000e2 e2ab      	LDI  R26,LOW(43)
0000e3 c051      	RJMP _0x2B
                 ; 0000 0039             break;
                 ; 0000 003A         }
                 ; 0000 003B         case '-':
                 _0x16:
0000e4 32ed      	CPI  R30,LOW(0x2D)
0000e5 e0a0      	LDI  R26,HIGH(0x2D)
0000e6 07fa      	CPC  R31,R26
0000e7 f431      	BRNE _0x17
                 ; 0000 003C         {
                 ; 0000 003D             calc();
0000e8 d06d      	RCALL _calc
                 ; 0000 003E             last_operation = '-';
0000e9 e2ed      	LDI  R30,LOW(45)
0000ea 93e0 02a1 	STS  _last_operation,R30
                 ; 0000 003F             lcd_putchar('-');
0000ec e2ad      	LDI  R26,LOW(45)
0000ed c047      	RJMP _0x2B
                 ; 0000 0040             break;
                 ; 0000 0041         }
                 ; 0000 0042         case '/':
                 _0x17:
0000ee 32ef      	CPI  R30,LOW(0x2F)
0000ef e0a0      	LDI  R26,HIGH(0x2F)
0000f0 07fa      	CPC  R31,R26
0000f1 f431      	BRNE _0x18
                 ; 0000 0043         {
                 ; 0000 0044             calc();
0000f2 d063      	RCALL _calc
                 ; 0000 0045             last_operation = '/';
0000f3 e2ef      	LDI  R30,LOW(47)
0000f4 93e0 02a1 	STS  _last_operation,R30
                 ; 0000 0046             lcd_putchar('/');
0000f6 e2af      	LDI  R26,LOW(47)
0000f7 c03d      	RJMP _0x2B
                 ; 0000 0047             break;
                 ; 0000 0048         }
                 ; 0000 0049         case 'C':
                 _0x18:
0000f8 34e3      	CPI  R30,LOW(0x43)
0000f9 e0a0      	LDI  R26,HIGH(0x43)
0000fa 07fa      	CPC  R31,R26
0000fb f429      	BRNE _0x19
                 ; 0000 004A         {
                 ; 0000 004B             lcd_clear();
0000fc 940e 03fa 	CALL SUBOPT_0x1
                 ; 0000 004C             lcd_gotoxy(0, 0);
                 ; 0000 004D             number1 = 0;
0000fe 940e 0401 	CALL SUBOPT_0x2
                 ; 0000 004E             number2 = 0;
                 ; 0000 004F             last_operation = ' ';
                 ; 0000 0050             break;
000100 c035      	RJMP _0x14
                 ; 0000 0051         }
                 ; 0000 0052         case '=':
                 _0x19:
000101 33ed      	CPI  R30,LOW(0x3D)
000102 e0a0      	LDI  R26,HIGH(0x3D)
000103 07fa      	CPC  R31,R26
000104 f4f1      	BRNE _0x1B
                 ; 0000 0053         {
                 ; 0000 0054             lcd_clear();
000105 940e 03fa 	CALL SUBOPT_0x1
                 ; 0000 0055             lcd_gotoxy(0, 0);
                 ; 0000 0056             calc();
000107 d04e      	RCALL _calc
                 ; 0000 0057             sprintf(number_string, "%d", number2);
000108 e8e1      	LDI  R30,LOW(_number_string)
000109 e0f2      	LDI  R31,HIGH(_number_string)
00010a 93fa      	ST   -Y,R31
00010b 93ea      	ST   -Y,R30
                +
00010c e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00010d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010e 93fa      	ST   -Y,R31
00010f 93ea      	ST   -Y,R30
000110 01f3      	MOVW R30,R6
000111 940e 0454 	CALL __CWD1
000113 940e 0494 	CALL __PUTPARD1
000115 e084      	LDI  R24,4
000116 940e 03a6 	CALL _sprintf
000118 9628      	ADIW R28,8
                 ; 0000 0058             number1 = number2;
000119 0123      	MOVW R4,R6
                 ; 0000 0059             number2=0;
00011a 2466      	CLR  R6
00011b 2477      	CLR  R7
                 ; 0000 005A             lcd_puts(number_string);
00011c e8a1      	LDI  R26,LOW(_number_string)
00011d e0b2      	LDI  R27,HIGH(_number_string)
00011e d0d4      	RCALL _lcd_puts
                 ; 0000 005B             last_operation = ' ';
00011f e2e0      	LDI  R30,LOW(32)
000120 93e0 02a1 	STS  _last_operation,R30
                 ; 0000 005C             break;
000122 c013      	RJMP _0x14
                 ; 0000 005D         }
                 ; 0000 005E         default:
                 _0x1B:
                 ; 0000 005F         {
                 ; 0000 0060             number1 = number1*10 + alpha[key] -48;
000123 01f2      	MOVW R30,R4
000124 e0aa      	LDI  R26,LOW(10)
000125 e0b0      	LDI  R27,HIGH(10)
000126 940e 0461 	CALL __MULW12
000128 010f      	MOVW R0,R30
000129 940e 03f3 	CALL SUBOPT_0x0
00012b 01d0      	MOVW R26,R0
00012c 0fae      	ADD  R26,R30
00012d 1fbf      	ADC  R27,R31
00012e 97d0      	SBIW R26,48
00012f 012d      	MOVW R4,R26
                 ; 0000 0061             lcd_putchar(alpha[key]);
000130 e7a0      	LDI  R26,LOW(_alpha)
000131 e0b2      	LDI  R27,HIGH(_alpha)
000132 0daa      	ADD  R26,R10
000133 1dbb      	ADC  R27,R11
000134 91ac      	LD   R26,X
                 _0x2B:
000135 d09d      	RCALL _lcd_putchar
                 ; 0000 0062             break;
                 ; 0000 0063         }
                 ; 0000 0064     }
                 _0x14:
                 ; 0000 0065 }
000136 91e9      	LD   R30,Y+
000137 bfef      	OUT  SREG,R30
000138 91f9      	LD   R31,Y+
000139 91e9      	LD   R30,Y+
00013a 91b9      	LD   R27,Y+
00013b 91a9      	LD   R26,Y+
00013c 9199      	LD   R25,Y+
00013d 9189      	LD   R24,Y+
00013e 9179      	LD   R23,Y+
00013f 9169      	LD   R22,Y+
000140 90f9      	LD   R15,Y+
000141 9019      	LD   R1,Y+
000142 9009      	LD   R0,Y+
000143 9518      	RETI
                 ; .FEND
                 ;
                 ;void main()
                 ; 0000 0068 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0069     DDRB=0XFF;
000144 efef      	LDI  R30,LOW(255)
000145 bbe7      	OUT  0x17,R30
                 ; 0000 006A     DDRC=0X00;
000146 e0e0      	LDI  R30,LOW(0)
000147 bbe4      	OUT  0x14,R30
                 ; 0000 006B     DDRA=0XFF;
000148 efef      	LDI  R30,LOW(255)
000149 bbea      	OUT  0x1A,R30
                 ; 0000 006C     PORTA=0XFF;
00014a bbeb      	OUT  0x1B,R30
                 ; 0000 006D     DDRD=0X00;
00014b e0e0      	LDI  R30,LOW(0)
00014c bbe1      	OUT  0x11,R30
                 ; 0000 006E 
                 ; 0000 006F     lcd_init(16);
00014d e1a0      	LDI  R26,LOW(16)
00014e d0b5      	RCALL _lcd_init
                 ; 0000 0070 
                 ; 0000 0071     GICR=(1<<INT0);
00014f e4e0      	LDI  R30,LOW(64)
000150 bfeb      	OUT  0x3B,R30
                 ; 0000 0072     SREG|=0X80;
000151 9478      	BSET 7
                 ; 0000 0073     MCUCR=0X03;
000152 e0e3      	LDI  R30,LOW(3)
000153 bfe5      	OUT  0x35,R30
                 ; 0000 0074 
                 ; 0000 0075     while(1)
                 _0x1C:
                 ; 0000 0076     {
                 ; 0000 0077     }
000154 cfff      	RJMP _0x1C
                 ; 0000 0078 }
                 _0x1F:
000155 cfff      	RJMP _0x1F
                 ; .FEND
                 ;
                 ;void calc(void)
                 ; 0000 007B {
                 _calc:
                 ; .FSTART _calc
                 ; 0000 007C     switch(last_operation)
000156 91e0 02a1 	LDS  R30,_last_operation
000158 e0f0      	LDI  R31,0
                 ; 0000 007D     {
                 ; 0000 007E         case '+':
000159 32eb      	CPI  R30,LOW(0x2B)
00015a e0a0      	LDI  R26,HIGH(0x2B)
00015b 07fa      	CPC  R31,R26
00015c f419      	BRNE _0x23
                 ; 0000 007F         {
                 ; 0000 0080             number2 = number2 + number1;
                +
00015d 0c64     +ADD R6 , R4
00015e 1c75     +ADC R7 , R5
                 	__ADDWRR 6,7,4,5
                 ; 0000 0081             number1 = 0;
00015f c031      	RJMP _0x2C
                 ; 0000 0082             break;
                 ; 0000 0083         }
                 ; 0000 0084         case '-':
                 _0x23:
000160 32ed      	CPI  R30,LOW(0x2D)
000161 e0a0      	LDI  R26,HIGH(0x2D)
000162 07fa      	CPC  R31,R26
000163 f419      	BRNE _0x24
                 ; 0000 0085         {
                 ; 0000 0086             number2 = number2 - number1;
                +
000164 1864     +SUB R6 , R4
000165 0875     +SBC R7 , R5
                 	__SUBWRR 6,7,4,5
                 ; 0000 0087             number1 = 0;
000166 c02a      	RJMP _0x2C
                 ; 0000 0088             break;
                 ; 0000 0089         }
                 ; 0000 008A         case '*':
                 _0x24:
000167 32ea      	CPI  R30,LOW(0x2A)
000168 e0a0      	LDI  R26,HIGH(0x2A)
000169 07fa      	CPC  R31,R26
00016a f431      	BRNE _0x25
                 ; 0000 008B         {
                 ; 0000 008C             number2 = number2 * number1;
00016b 01f2      	MOVW R30,R4
00016c 01d3      	MOVW R26,R6
00016d 940e 0461 	CALL __MULW12
00016f 013f      	MOVW R6,R30
                 ; 0000 008D             number1 = 0;
000170 c020      	RJMP _0x2C
                 ; 0000 008E             break;
                 ; 0000 008F         }
                 ; 0000 0090         case '/':
                 _0x25:
000171 32ef      	CPI  R30,LOW(0x2F)
000172 e0a0      	LDI  R26,HIGH(0x2F)
000173 07fa      	CPC  R31,R26
000174 f4b9      	BRNE _0x26
                 ; 0000 0091         {
                 ; 0000 0092             if(number1 == 0)
000175 2c04      	MOV  R0,R4
000176 2805      	OR   R0,R5
000177 f471      	BRNE _0x27
                 ; 0000 0093             {
                 ; 0000 0094               lcd_clear();
000178 940e 03fa 	CALL SUBOPT_0x1
                 ; 0000 0095               lcd_gotoxy(0, 0);
                 ; 0000 0096               lcd_puts("Divide By Zero!");
                +
00017a e6a0     +LDI R26 , LOW ( _0x28 + ( 0 ) )
00017b e0b2     +LDI R27 , HIGH ( _0x28 + ( 0 ) )
                 	__POINTW2MN _0x28,0
00017c d076      	RCALL _lcd_puts
                 ; 0000 0097               delay_ms(1500);
00017d edac      	LDI  R26,LOW(1500)
00017e e0b5      	LDI  R27,HIGH(1500)
00017f 940e 0442 	CALL _delay_ms
                 ; 0000 0098               lcd_clear();
000181 940e 03fa 	CALL SUBOPT_0x1
                 ; 0000 0099               lcd_gotoxy(0, 0);
                 ; 0000 009A               number1 = 0;
000183 940e 0401 	CALL SUBOPT_0x2
                 ; 0000 009B               number2 = 0;
                 ; 0000 009C               last_operation = ' ';
                 ; 0000 009D               break;
000185 c00d      	RJMP _0x22
                 ; 0000 009E             }
                 ; 0000 009F             number2 = number2 / number1;
                 _0x27:
000186 01f2      	MOVW R30,R4
000187 01d3      	MOVW R26,R6
000188 940e 0479 	CALL __DIVW21
00018a 013f      	MOVW R6,R30
                 ; 0000 00A0             number1 = 0;
00018b c005      	RJMP _0x2C
                 ; 0000 00A1             break;
                 ; 0000 00A2         }
                 ; 0000 00A3         case ' ':
                 _0x26:
00018c 32e0      	CPI  R30,LOW(0x20)
00018d e0a0      	LDI  R26,HIGH(0x20)
00018e 07fa      	CPC  R31,R26
00018f f419      	BRNE _0x22
                 ; 0000 00A4         {
                 ; 0000 00A5             number2 = number1;
000190 0132      	MOVW R6,R4
                 ; 0000 00A6             number1 = 0;
                 _0x2C:
000191 2444      	CLR  R4
000192 2455      	CLR  R5
                 ; 0000 00A7             break;
                 ; 0000 00A8         }
                 ; 0000 00A9     }
                 _0x22:
                 ; 0000 00AA }
000193 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x28:
000260           	.BYTE 0x10
                 ;
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000194 93aa      	ST   -Y,R26
000195 b3e8      	IN   R30,0x18
000196 70ef      	ANDI R30,LOW(0xF)
000197 2fae      	MOV  R26,R30
000198 81e8      	LD   R30,Y
000199 7fe0      	ANDI R30,LOW(0xF0)
00019a 2bea      	OR   R30,R26
00019b bbe8      	OUT  0x18,R30
                +
00019c e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00019d 958a     +DEC R24
00019e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00019f 9ade      	SBI  0x1B,6
                +
0001a0 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a1 958a     +DEC R24
0001a2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a3 98de      	CBI  0x1B,6
                +
0001a4 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001a5 958a     +DEC R24
0001a6 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001a7 c088      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001a8 93aa      	ST   -Y,R26
0001a9 81a8      	LD   R26,Y
0001aa dfe9      	RCALL __lcd_write_nibble_G100
0001ab 81e8          ld    r30,y
0001ac 95e2          swap  r30
0001ad 83e8          st    y,r30
0001ae 81a8      	LD   R26,Y
0001af dfe4      	RCALL __lcd_write_nibble_G100
                +
0001b0 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001b1 958a     +DEC R24
0001b2 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001b3 c07c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001b4 93aa      	ST   -Y,R26
0001b5 81e8      	LD   R30,Y
0001b6 e0f0      	LDI  R31,0
0001b7 55ee      	SUBI R30,LOW(-__base_y_G100)
0001b8 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0001b9 81e0      	LD   R30,Z
0001ba 81a9      	LDD  R26,Y+1
0001bb 0fae      	ADD  R26,R30
0001bc dfeb      	RCALL __lcd_write_data
0001bd 81e9      	LDD  R30,Y+1
0001be 93e0 02a6 	STS  __lcd_x,R30
0001c0 81e8      	LD   R30,Y
0001c1 93e0 02a7 	STS  __lcd_y,R30
0001c3 9622      	ADIW R28,2
0001c4 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001c5 e0a2      	LDI  R26,LOW(2)
0001c6 940e 0409 	CALL SUBOPT_0x3
0001c8 e0ac      	LDI  R26,LOW(12)
0001c9 dfde      	RCALL __lcd_write_data
0001ca e0a1      	LDI  R26,LOW(1)
0001cb 940e 0409 	CALL SUBOPT_0x3
0001cd e0e0      	LDI  R30,LOW(0)
0001ce 93e0 02a7 	STS  __lcd_y,R30
0001d0 93e0 02a6 	STS  __lcd_x,R30
0001d2 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001d3 93aa      	ST   -Y,R26
0001d4 81a8      	LD   R26,Y
0001d5 30aa      	CPI  R26,LOW(0xA)
0001d6 f031      	BREQ _0x2000005
0001d7 91e0 02a8 	LDS  R30,__lcd_maxx
0001d9 91a0 02a6 	LDS  R26,__lcd_x
0001db 17ae      	CP   R26,R30
0001dc f060      	BRLO _0x2000004
                 _0x2000005:
0001dd e0e0      	LDI  R30,LOW(0)
0001de 93ea      	ST   -Y,R30
0001df 91a0 02a7 	LDS  R26,__lcd_y
0001e1 5faf      	SUBI R26,-LOW(1)
0001e2 93a0 02a7 	STS  __lcd_y,R26
0001e4 dfcf      	RCALL _lcd_gotoxy
0001e5 81a8      	LD   R26,Y
0001e6 30aa      	CPI  R26,LOW(0xA)
0001e7 f409      	BRNE _0x2000007
0001e8 c047      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
0001e9 91e0 02a6 	LDS  R30,__lcd_x
0001eb 5fef      	SUBI R30,-LOW(1)
0001ec 93e0 02a6 	STS  __lcd_x,R30
0001ee 9adc      	SBI  0x1B,4
0001ef 81a8      	LD   R26,Y
0001f0 dfb7      	RCALL __lcd_write_data
0001f1 98dc      	CBI  0x1B,4
0001f2 c03d      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001f3 93ba      	ST   -Y,R27
0001f4 93aa      	ST   -Y,R26
0001f5 931a      	ST   -Y,R17
                 _0x2000008:
0001f6 81a9      	LDD  R26,Y+1
0001f7 81ba      	LDD  R27,Y+1+1
0001f8 91ed      	LD   R30,X+
0001f9 83a9      	STD  Y+1,R26
0001fa 83ba      	STD  Y+1+1,R27
0001fb 2f1e      	MOV  R17,R30
0001fc 30e0      	CPI  R30,0
0001fd f019      	BREQ _0x200000A
0001fe 2fa1      	MOV  R26,R17
0001ff dfd3      	RCALL _lcd_putchar
000200 cff5      	RJMP _0x2000008
                 _0x200000A:
000201 8118      	LDD  R17,Y+0
000202 9623      	ADIW R28,3
000203 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000204 93aa      	ST   -Y,R26
000205 b3e7      	IN   R30,0x17
000206 6fe0      	ORI  R30,LOW(0xF0)
000207 bbe7      	OUT  0x17,R30
000208 9ad6      	SBI  0x1A,6
000209 9ad4      	SBI  0x1A,4
00020a 9ad5      	SBI  0x1A,5
00020b 98de      	CBI  0x1B,6
00020c 98dc      	CBI  0x1B,4
00020d 98dd      	CBI  0x1B,5
00020e 81e8      	LD   R30,Y
00020f 93e0 02a8 	STS  __lcd_maxx,R30
000211 58e0      	SUBI R30,-LOW(128)
                +
000212 93e0 02a4+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000214 81e8      	LD   R30,Y
000215 54e0      	SUBI R30,-LOW(192)
                +
000216 93e0 02a5+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000218 e1a4      	LDI  R26,LOW(20)
000219 e0b0      	LDI  R27,0
00021a 940e 0442 	CALL _delay_ms
00021c 940e 040f 	CALL SUBOPT_0x4
00021e 940e 040f 	CALL SUBOPT_0x4
000220 940e 040f 	CALL SUBOPT_0x4
000222 e2a0      	LDI  R26,LOW(32)
000223 df70      	RCALL __lcd_write_nibble_G100
                +
000224 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000225 958a     +DEC R24
000226 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000227 e2a8      	LDI  R26,LOW(40)
000228 df7f      	RCALL __lcd_write_data
000229 e0a4      	LDI  R26,LOW(4)
00022a df7d      	RCALL __lcd_write_data
00022b e8a5      	LDI  R26,LOW(133)
00022c df7b      	RCALL __lcd_write_data
00022d e0a6      	LDI  R26,LOW(6)
00022e df79      	RCALL __lcd_write_data
00022f df95      	RCALL _lcd_clear
                 _0x2080002:
000230 9621      	ADIW R28,1
000231 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000232 93ba      	ST   -Y,R27
000233 93aa      	ST   -Y,R26
000234 931a      	ST   -Y,R17
000235 930a      	ST   -Y,R16
000236 81aa      	LDD  R26,Y+2
000237 81bb      	LDD  R27,Y+2+1
000238 9612      	ADIW R26,2
000239 940e 048c 	CALL __GETW1P
00023b 9730      	SBIW R30,0
00023c f159      	BREQ _0x2020010
00023d 81aa      	LDD  R26,Y+2
00023e 81bb      	LDD  R27,Y+2+1
00023f 9614      	ADIW R26,4
000240 940e 048c 	CALL __GETW1P
000242 018f      	MOVW R16,R30
000243 9730      	SBIW R30,0
000244 f061      	BREQ _0x2020012
                +
000245 3002     +CPI R16 , LOW ( 2 )
000246 e0e0     +LDI R30 , HIGH ( 2 )
000247 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000248 f098      	BRLO _0x2020013
000249 01f8      	MOVW R30,R16
00024a 9731      	SBIW R30,1
00024b 018f      	MOVW R16,R30
                +
00024c 81aa     +LDD R26 , Y + 2
00024d 81bb     +LDD R27 , Y + 2 + 1
00024e 9614     +ADIW R26 , 4
00024f 93ed     +ST X + , R30
000250 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000251 81aa      	LDD  R26,Y+2
000252 81bb      	LDD  R27,Y+2+1
000253 9612      	ADIW R26,2
000254 91ed      	LD   R30,X+
000255 91fd      	LD   R31,X+
000256 9631      	ADIW R30,1
000257 93fe      	ST   -X,R31
000258 93ee      	ST   -X,R30
000259 9731      	SBIW R30,1
00025a 81ac      	LDD  R26,Y+4
00025b 83a0      	STD  Z+0,R26
                 _0x2020013:
00025c 81aa      	LDD  R26,Y+2
00025d 81bb      	LDD  R27,Y+2+1
00025e 940e 048c 	CALL __GETW1P
000260 23ff      	TST  R31
000261 f02a      	BRMI _0x2020014
000262 91ed      	LD   R30,X+
000263 91fd      	LD   R31,X+
000264 9631      	ADIW R30,1
000265 93fe      	ST   -X,R31
000266 93ee      	ST   -X,R30
                 _0x2020014:
000267 c006      	RJMP _0x2020015
                 _0x2020010:
000268 81aa      	LDD  R26,Y+2
000269 81bb      	LDD  R27,Y+2+1
00026a efef      	LDI  R30,LOW(65535)
00026b efff      	LDI  R31,HIGH(65535)
00026c 93ed      	ST   X+,R30
00026d 93fc      	ST   X,R31
                 _0x2020015:
00026e 8119      	LDD  R17,Y+1
00026f 8108      	LDD  R16,Y+0
000270 9625      	ADIW R28,5
000271 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
000272 93ba      	ST   -Y,R27
000273 93aa      	ST   -Y,R26
000274 9726      	SBIW R28,6
000275 940e 0499 	CALL __SAVELOCR6
000277 e010      	LDI  R17,0
000278 85ac      	LDD  R26,Y+12
000279 85bd      	LDD  R27,Y+12+1
00027a e0e0      	LDI  R30,LOW(0)
00027b e0f0      	LDI  R31,HIGH(0)
00027c 93ed      	ST   X+,R30
00027d 93fc      	ST   X,R31
                 _0x2020016:
00027e 89ea      	LDD  R30,Y+18
00027f 89fb      	LDD  R31,Y+18+1
000280 9631      	ADIW R30,1
000281 8bea      	STD  Y+18,R30
000282 8bfb      	STD  Y+18+1,R31
000283 9731      	SBIW R30,1
000284 91e4      	LPM  R30,Z
000285 2f2e      	MOV  R18,R30
000286 30e0      	CPI  R30,0
000287 f409      	BRNE PC+2
000288 c115      	RJMP _0x2020018
000289 2fe1      	MOV  R30,R17
00028a 30e0      	CPI  R30,0
00028b f439      	BRNE _0x202001C
00028c 3225      	CPI  R18,37
00028d f411      	BRNE _0x202001D
00028e e011      	LDI  R17,LOW(1)
00028f c002      	RJMP _0x202001E
                 _0x202001D:
000290 940e 0416 	CALL SUBOPT_0x5
                 _0x202001E:
000292 c10a      	RJMP _0x202001B
                 _0x202001C:
000293 30e1      	CPI  R30,LOW(0x1)
000294 f4a9      	BRNE _0x202001F
000295 3225      	CPI  R18,37
000296 f419      	BRNE _0x2020020
000297 940e 0416 	CALL SUBOPT_0x5
000299 c102      	RJMP _0x20200CC
                 _0x2020020:
00029a e012      	LDI  R17,LOW(2)
00029b e040      	LDI  R20,LOW(0)
00029c e000      	LDI  R16,LOW(0)
00029d 322d      	CPI  R18,45
00029e f411      	BRNE _0x2020021
00029f e001      	LDI  R16,LOW(1)
0002a0 c0fc      	RJMP _0x202001B
                 _0x2020021:
0002a1 322b      	CPI  R18,43
0002a2 f411      	BRNE _0x2020022
0002a3 e24b      	LDI  R20,LOW(43)
0002a4 c0f8      	RJMP _0x202001B
                 _0x2020022:
0002a5 3220      	CPI  R18,32
0002a6 f411      	BRNE _0x2020023
0002a7 e240      	LDI  R20,LOW(32)
0002a8 c0f4      	RJMP _0x202001B
                 _0x2020023:
0002a9 c002      	RJMP _0x2020024
                 _0x202001F:
0002aa 30e2      	CPI  R30,LOW(0x2)
0002ab f439      	BRNE _0x2020025
                 _0x2020024:
0002ac e050      	LDI  R21,LOW(0)
0002ad e013      	LDI  R17,LOW(3)
0002ae 3320      	CPI  R18,48
0002af f411      	BRNE _0x2020026
0002b0 6800      	ORI  R16,LOW(128)
0002b1 c0eb      	RJMP _0x202001B
                 _0x2020026:
0002b2 c003      	RJMP _0x2020027
                 _0x2020025:
0002b3 30e3      	CPI  R30,LOW(0x3)
0002b4 f009      	BREQ PC+2
0002b5 c0e7      	RJMP _0x202001B
                 _0x2020027:
0002b6 3320      	CPI  R18,48
0002b7 f010      	BRLO _0x202002A
0002b8 332a      	CPI  R18,58
0002b9 f008      	BRLO _0x202002B
                 _0x202002A:
0002ba c007      	RJMP _0x2020029
                 _0x202002B:
0002bb e0aa      	LDI  R26,LOW(10)
0002bc 9f5a      	MUL  R21,R26
0002bd 2d50      	MOV  R21,R0
0002be 2fe2      	MOV  R30,R18
0002bf 53e0      	SUBI R30,LOW(48)
0002c0 0f5e      	ADD  R21,R30
0002c1 c0db      	RJMP _0x202001B
                 _0x2020029:
0002c2 2fe2      	MOV  R30,R18
0002c3 36e3      	CPI  R30,LOW(0x63)
0002c4 f449      	BRNE _0x202002F
0002c5 940e 041d 	CALL SUBOPT_0x6
0002c7 89e8      	LDD  R30,Y+16
0002c8 89f9      	LDD  R31,Y+16+1
0002c9 81a4      	LDD  R26,Z+4
0002ca 93aa      	ST   -Y,R26
0002cb 940e 0423 	CALL SUBOPT_0x7
0002cd c0ce      	RJMP _0x2020030
                 _0x202002F:
0002ce 37e3      	CPI  R30,LOW(0x73)
0002cf f441      	BRNE _0x2020032
0002d0 940e 041d 	CALL SUBOPT_0x6
0002d2 940e 0429 	CALL SUBOPT_0x8
0002d4 940e 03da 	CALL _strlen
0002d6 2f1e      	MOV  R17,R30
0002d7 c00a      	RJMP _0x2020033
                 _0x2020032:
0002d8 37e0      	CPI  R30,LOW(0x70)
0002d9 f461      	BRNE _0x2020035
0002da 940e 041d 	CALL SUBOPT_0x6
0002dc 940e 0429 	CALL SUBOPT_0x8
0002de 940e 03e6 	CALL _strlenf
0002e0 2f1e      	MOV  R17,R30
0002e1 6008      	ORI  R16,LOW(8)
                 _0x2020033:
0002e2 6002      	ORI  R16,LOW(2)
0002e3 770f      	ANDI R16,LOW(127)
0002e4 e030      	LDI  R19,LOW(0)
0002e5 c034      	RJMP _0x2020036
                 _0x2020035:
0002e6 36e4      	CPI  R30,LOW(0x64)
0002e7 f011      	BREQ _0x2020039
0002e8 36e9      	CPI  R30,LOW(0x69)
0002e9 f411      	BRNE _0x202003A
                 _0x2020039:
0002ea 6004      	ORI  R16,LOW(4)
0002eb c002      	RJMP _0x202003B
                 _0x202003A:
0002ec 37e5      	CPI  R30,LOW(0x75)
0002ed f431      	BRNE _0x202003C
                 _0x202003B:
0002ee e5e4      	LDI  R30,LOW(_tbl10_G101*2)
0002ef e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
0002f0 83ee      	STD  Y+6,R30
0002f1 83ff      	STD  Y+6+1,R31
0002f2 e015      	LDI  R17,LOW(5)
0002f3 c00c      	RJMP _0x202003D
                 _0x202003C:
0002f4 35e8      	CPI  R30,LOW(0x58)
0002f5 f411      	BRNE _0x202003F
0002f6 6008      	ORI  R16,LOW(8)
0002f7 c003      	RJMP _0x2020040
                 _0x202003F:
0002f8 37e8      	CPI  R30,LOW(0x78)
0002f9 f009      	BREQ PC+2
0002fa c0a1      	RJMP _0x2020071
                 _0x2020040:
0002fb e5ee      	LDI  R30,LOW(_tbl16_G101*2)
0002fc e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
0002fd 83ee      	STD  Y+6,R30
0002fe 83ff      	STD  Y+6+1,R31
0002ff e014      	LDI  R17,LOW(4)
                 _0x202003D:
000300 ff02      	SBRS R16,2
000301 c014      	RJMP _0x2020042
000302 940e 041d 	CALL SUBOPT_0x6
000304 940e 0433 	CALL SUBOPT_0x9
000306 85ab      	LDD  R26,Y+11
000307 23aa      	TST  R26
000308 f43a      	BRPL _0x2020043
000309 85ea      	LDD  R30,Y+10
00030a 85fb      	LDD  R31,Y+10+1
00030b 940e 0450 	CALL __ANEGW1
00030d 87ea      	STD  Y+10,R30
00030e 87fb      	STD  Y+10+1,R31
00030f e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000310 3040      	CPI  R20,0
000311 f011      	BREQ _0x2020044
000312 5f1f      	SUBI R17,-LOW(1)
000313 c001      	RJMP _0x2020045
                 _0x2020044:
000314 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000315 c004      	RJMP _0x2020046
                 _0x2020042:
000316 940e 041d 	CALL SUBOPT_0x6
000318 940e 0433 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
00031a fd00      	SBRC R16,0
00031b c011      	RJMP _0x2020047
                 _0x2020048:
00031c 1715      	CP   R17,R21
00031d f478      	BRSH _0x202004A
00031e ff07      	SBRS R16,7
00031f c008      	RJMP _0x202004B
000320 ff02      	SBRS R16,2
000321 c004      	RJMP _0x202004C
000322 7f0b      	ANDI R16,LOW(251)
000323 2f24      	MOV  R18,R20
000324 5011      	SUBI R17,LOW(1)
000325 c001      	RJMP _0x202004D
                 _0x202004C:
000326 e320      	LDI  R18,LOW(48)
                 _0x202004D:
000327 c001      	RJMP _0x202004E
                 _0x202004B:
000328 e220      	LDI  R18,LOW(32)
                 _0x202004E:
000329 940e 0416 	CALL SUBOPT_0x5
00032b 5051      	SUBI R21,LOW(1)
00032c cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
00032d 2f31      	MOV  R19,R17
00032e ff01      	SBRS R16,1
00032f c017      	RJMP _0x202004F
                 _0x2020050:
000330 3030      	CPI  R19,0
000331 f0a1      	BREQ _0x2020052
000332 ff03      	SBRS R16,3
000333 c006      	RJMP _0x2020053
000334 81ee      	LDD  R30,Y+6
000335 81ff      	LDD  R31,Y+6+1
000336 9125      	LPM  R18,Z+
000337 83ee      	STD  Y+6,R30
000338 83ff      	STD  Y+6+1,R31
000339 c005      	RJMP _0x2020054
                 _0x2020053:
00033a 81ae      	LDD  R26,Y+6
00033b 81bf      	LDD  R27,Y+6+1
00033c 912d      	LD   R18,X+
00033d 83ae      	STD  Y+6,R26
00033e 83bf      	STD  Y+6+1,R27
                 _0x2020054:
00033f 940e 0416 	CALL SUBOPT_0x5
000341 3050      	CPI  R21,0
000342 f009      	BREQ _0x2020055
000343 5051      	SUBI R21,LOW(1)
                 _0x2020055:
000344 5031      	SUBI R19,LOW(1)
000345 cfea      	RJMP _0x2020050
                 _0x2020052:
000346 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
000347 e320      	LDI  R18,LOW(48)
000348 81ee      	LDD  R30,Y+6
000349 81ff      	LDD  R31,Y+6+1
00034a 940e 0490 	CALL __GETW1PF
00034c 87e8      	STD  Y+8,R30
00034d 87f9      	STD  Y+8+1,R31
00034e 81ee      	LDD  R30,Y+6
00034f 81ff      	LDD  R31,Y+6+1
000350 9632      	ADIW R30,2
000351 83ee      	STD  Y+6,R30
000352 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000353 85e8      	LDD  R30,Y+8
000354 85f9      	LDD  R31,Y+8+1
000355 85aa      	LDD  R26,Y+10
000356 85bb      	LDD  R27,Y+10+1
000357 17ae      	CP   R26,R30
000358 07bf      	CPC  R27,R31
000359 f050      	BRLO _0x202005C
00035a 5f2f      	SUBI R18,-LOW(1)
00035b 85a8      	LDD  R26,Y+8
00035c 85b9      	LDD  R27,Y+8+1
00035d 85ea      	LDD  R30,Y+10
00035e 85fb      	LDD  R31,Y+10+1
00035f 1bea      	SUB  R30,R26
000360 0bfb      	SBC  R31,R27
000361 87ea      	STD  Y+10,R30
000362 87fb      	STD  Y+10+1,R31
000363 cfef      	RJMP _0x202005A
                 _0x202005C:
000364 332a      	CPI  R18,58
000365 f028      	BRLO _0x202005D
000366 ff03      	SBRS R16,3
000367 c002      	RJMP _0x202005E
000368 5f29      	SUBI R18,-LOW(7)
000369 c001      	RJMP _0x202005F
                 _0x202005E:
00036a 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
00036b fd04      	SBRC R16,4
00036c c01a      	RJMP _0x2020061
00036d 3321      	CPI  R18,49
00036e f420      	BRSH _0x2020063
00036f 85a8      	LDD  R26,Y+8
000370 85b9      	LDD  R27,Y+8+1
000371 9711      	SBIW R26,1
000372 f409      	BRNE _0x2020062
                 _0x2020063:
000373 c009      	RJMP _0x20200CD
                 _0x2020062:
000374 1753      	CP   R21,R19
000375 f010      	BRLO _0x2020067
000376 ff00      	SBRS R16,0
000377 c001      	RJMP _0x2020068
                 _0x2020067:
000378 c013      	RJMP _0x2020066
                 _0x2020068:
000379 e220      	LDI  R18,LOW(32)
00037a ff07      	SBRS R16,7
00037b c00b      	RJMP _0x2020069
00037c e320      	LDI  R18,LOW(48)
                 _0x20200CD:
00037d 6100      	ORI  R16,LOW(16)
00037e ff02      	SBRS R16,2
00037f c007      	RJMP _0x202006A
000380 7f0b      	ANDI R16,LOW(251)
000381 934a      	ST   -Y,R20
000382 940e 0423 	CALL SUBOPT_0x7
000384 3050      	CPI  R21,0
000385 f009      	BREQ _0x202006B
000386 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000387 940e 0416 	CALL SUBOPT_0x5
000389 3050      	CPI  R21,0
00038a f009      	BREQ _0x202006C
00038b 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
00038c 5031      	SUBI R19,LOW(1)
00038d 85a8      	LDD  R26,Y+8
00038e 85b9      	LDD  R27,Y+8+1
00038f 9712      	SBIW R26,2
000390 f008      	BRLO _0x2020059
000391 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
000392 ff00      	SBRS R16,0
000393 c008      	RJMP _0x202006D
                 _0x202006E:
000394 3050      	CPI  R21,0
000395 f031      	BREQ _0x2020070
000396 5051      	SUBI R21,LOW(1)
000397 e2e0      	LDI  R30,LOW(32)
000398 93ea      	ST   -Y,R30
000399 940e 0423 	CALL SUBOPT_0x7
00039b cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
00039c e010      	LDI  R17,LOW(0)
                 _0x202001B:
00039d cee0      	RJMP _0x2020016
                 _0x2020018:
00039e 85ac      	LDD  R26,Y+12
00039f 85bd      	LDD  R27,Y+12+1
0003a0 940e 048c 	CALL __GETW1P
0003a2 940e 04a0 	CALL __LOADLOCR6
0003a4 9664      	ADIW R28,20
0003a5 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003a6 92ff      	PUSH R15
0003a7 2ef8      	MOV  R15,R24
0003a8 9726      	SBIW R28,6
0003a9 940e 049b 	CALL __SAVELOCR4
0003ab 940e 043b 	CALL SUBOPT_0xA
0003ad 9730      	SBIW R30,0
0003ae f419      	BRNE _0x2020072
0003af efef      	LDI  R30,LOW(65535)
0003b0 efff      	LDI  R31,HIGH(65535)
0003b1 c023      	RJMP _0x2080001
                 _0x2020072:
0003b2 01de      	MOVW R26,R28
0003b3 9616      	ADIW R26,6
0003b4 940e 044c 	CALL __ADDW2R15
0003b6 018d      	MOVW R16,R26
0003b7 940e 043b 	CALL SUBOPT_0xA
0003b9 83ee      	STD  Y+6,R30
0003ba 83ff      	STD  Y+6+1,R31
0003bb e0e0      	LDI  R30,LOW(0)
0003bc 87e8      	STD  Y+8,R30
0003bd 87e9      	STD  Y+8+1,R30
0003be 01de      	MOVW R26,R28
0003bf 961a      	ADIW R26,10
0003c0 940e 044c 	CALL __ADDW2R15
0003c2 940e 048c 	CALL __GETW1P
0003c4 93fa      	ST   -Y,R31
0003c5 93ea      	ST   -Y,R30
0003c6 931a      	ST   -Y,R17
0003c7 930a      	ST   -Y,R16
0003c8 e3e2      	LDI  R30,LOW(_put_buff_G101)
0003c9 e0f2      	LDI  R31,HIGH(_put_buff_G101)
0003ca 93fa      	ST   -Y,R31
0003cb 93ea      	ST   -Y,R30
0003cc 01de      	MOVW R26,R28
0003cd 961a      	ADIW R26,10
0003ce dea3      	RCALL __print_G101
0003cf 019f      	MOVW R18,R30
0003d0 81ae      	LDD  R26,Y+6
0003d1 81bf      	LDD  R27,Y+6+1
0003d2 e0e0      	LDI  R30,LOW(0)
0003d3 93ec      	ST   X,R30
0003d4 01f9      	MOVW R30,R18
                 _0x2080001:
0003d5 940e 04a2 	CALL __LOADLOCR4
0003d7 962a      	ADIW R28,10
0003d8 90ff      	POP  R15
0003d9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0003da 93ba      	ST   -Y,R27
0003db 93aa      	ST   -Y,R26
0003dc 91a9          ld   r26,y+
0003dd 91b9          ld   r27,y+
0003de 27ee          clr  r30
0003df 27ff          clr  r31
                 strlen0:
0003e0 916d          ld   r22,x+
0003e1 2366          tst  r22
0003e2 f011          breq strlen1
0003e3 9631          adiw r30,1
0003e4 cffb          rjmp strlen0
                 strlen1:
0003e5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0003e6 93ba      	ST   -Y,R27
0003e7 93aa      	ST   -Y,R26
0003e8 27aa          clr  r26
0003e9 27bb          clr  r27
0003ea 91e9          ld   r30,y+
0003eb 91f9          ld   r31,y+
                 strlenf0:
0003ec 9005      	lpm  r0,z+
0003ed 2000          tst  r0
0003ee f011          breq strlenf1
0003ef 9611          adiw r26,1
0003f0 cffb          rjmp strlenf0
                 strlenf1:
0003f1 01fd          movw r30,r26
0003f2 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _alpha:
000270           	.BYTE 0x11
                 _number_string:
000281           	.BYTE 0x20
                 _last_operation:
0002a1           	.BYTE 0x1
                 __base_y_G100:
0002a2           	.BYTE 0x4
                 __lcd_x:
0002a6           	.BYTE 0x1
                 __lcd_y:
0002a7           	.BYTE 0x1
                 __lcd_maxx:
0002a8           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0003f3 e7a0      	LDI  R26,LOW(_alpha)
0003f4 e0b2      	LDI  R27,HIGH(_alpha)
0003f5 0daa      	ADD  R26,R10
0003f6 1dbb      	ADC  R27,R11
0003f7 91ec      	LD   R30,X
0003f8 e0f0      	LDI  R31,0
0003f9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x1:
0003fa 940e 01c5 	CALL _lcd_clear
0003fc e0e0      	LDI  R30,LOW(0)
0003fd 93ea      	ST   -Y,R30
0003fe e0a0      	LDI  R26,LOW(0)
0003ff 940c 01b4 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000401 2444      	CLR  R4
000402 2455      	CLR  R5
000403 2466      	CLR  R6
000404 2477      	CLR  R7
000405 e2e0      	LDI  R30,LOW(32)
000406 93e0 02a1 	STS  _last_operation,R30
000408 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000409 940e 01a8 	CALL __lcd_write_data
00040b e0a3      	LDI  R26,LOW(3)
00040c e0b0      	LDI  R27,0
00040d 940c 0442 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
00040f e3a0      	LDI  R26,LOW(48)
000410 940e 0194 	CALL __lcd_write_nibble_G100
                +
000412 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000413 958a     +DEC R24
000414 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000415 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
000416 932a      	ST   -Y,R18
000417 85ad      	LDD  R26,Y+13
000418 85be      	LDD  R27,Y+13+1
000419 85ef      	LDD  R30,Y+15
00041a 89f8      	LDD  R31,Y+15+1
00041b 9509      	ICALL
00041c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
00041d 89e8      	LDD  R30,Y+16
00041e 89f9      	LDD  R31,Y+16+1
00041f 9734      	SBIW R30,4
000420 8be8      	STD  Y+16,R30
000421 8bf9      	STD  Y+16+1,R31
000422 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
000423 85ad      	LDD  R26,Y+13
000424 85be      	LDD  R27,Y+13+1
000425 85ef      	LDD  R30,Y+15
000426 89f8      	LDD  R31,Y+15+1
000427 9509      	ICALL
000428 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000429 89a8      	LDD  R26,Y+16
00042a 89b9      	LDD  R27,Y+16+1
00042b 9614      	ADIW R26,4
00042c 940e 048c 	CALL __GETW1P
00042e 83ee      	STD  Y+6,R30
00042f 83ff      	STD  Y+6+1,R31
000430 81ae      	LDD  R26,Y+6
000431 81bf      	LDD  R27,Y+6+1
000432 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
000433 89a8      	LDD  R26,Y+16
000434 89b9      	LDD  R27,Y+16+1
000435 9614      	ADIW R26,4
000436 940e 048c 	CALL __GETW1P
000438 87ea      	STD  Y+10,R30
000439 87fb      	STD  Y+10+1,R31
00043a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00043b 01de      	MOVW R26,R28
00043c 961c      	ADIW R26,12
00043d 940e 044c 	CALL __ADDW2R15
00043f 940e 048c 	CALL __GETW1P
000441 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000442 9610      	adiw r26,0
000443 f039      	breq __delay_ms1
                 __delay_ms0:
000444 95a8      	wdr
                +
000445 ef8a     +LDI R24 , LOW ( 0xFA )
000446 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000447 9701     +SBIW R24 , 1
000448 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000449 9711      	sbiw r26,1
00044a f7c9      	brne __delay_ms0
                 __delay_ms1:
00044b 9508      	ret
                 
                 __ADDW2R15:
00044c 2400      	CLR  R0
00044d 0daf      	ADD  R26,R15
00044e 1db0      	ADC  R27,R0
00044f 9508      	RET
                 
                 __ANEGW1:
000450 95f1      	NEG  R31
000451 95e1      	NEG  R30
000452 40f0      	SBCI R31,0
000453 9508      	RET
                 
                 __CWD1:
000454 2f6f      	MOV  R22,R31
000455 0f66      	ADD  R22,R22
000456 0b66      	SBC  R22,R22
000457 2f76      	MOV  R23,R22
000458 9508      	RET
                 
                 __MULW12U:
000459 9ffa      	MUL  R31,R26
00045a 2df0      	MOV  R31,R0
00045b 9feb      	MUL  R30,R27
00045c 0df0      	ADD  R31,R0
00045d 9fea      	MUL  R30,R26
00045e 2de0      	MOV  R30,R0
00045f 0df1      	ADD  R31,R1
000460 9508      	RET
                 
                 __MULW12:
000461 d01c      	RCALL __CHKSIGNW
000462 dff6      	RCALL __MULW12U
000463 f40e      	BRTC __MULW121
000464 dfeb      	RCALL __ANEGW1
                 __MULW121:
000465 9508      	RET
                 
                 __DIVW21U:
000466 2400      	CLR  R0
000467 2411      	CLR  R1
000468 e190      	LDI  R25,16
                 __DIVW21U1:
000469 0faa      	LSL  R26
00046a 1fbb      	ROL  R27
00046b 1c00      	ROL  R0
00046c 1c11      	ROL  R1
00046d 1a0e      	SUB  R0,R30
00046e 0a1f      	SBC  R1,R31
00046f f418      	BRCC __DIVW21U2
000470 0e0e      	ADD  R0,R30
000471 1e1f      	ADC  R1,R31
000472 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000473 60a1      	SBR  R26,1
                 __DIVW21U3:
000474 959a      	DEC  R25
000475 f799      	BRNE __DIVW21U1
000476 01fd      	MOVW R30,R26
000477 01d0      	MOVW R26,R0
000478 9508      	RET
                 
                 __DIVW21:
000479 d004      	RCALL __CHKSIGNW
00047a dfeb      	RCALL __DIVW21U
00047b f40e      	BRTC __DIVW211
00047c dfd3      	RCALL __ANEGW1
                 __DIVW211:
00047d 9508      	RET
                 
                 __CHKSIGNW:
00047e 94e8      	CLT
00047f fff7      	SBRS R31,7
000480 c002      	RJMP __CHKSW1
000481 dfce      	RCALL __ANEGW1
000482 9468      	SET
                 __CHKSW1:
000483 ffb7      	SBRS R27,7
000484 c006      	RJMP __CHKSW2
000485 95a0      	COM  R26
000486 95b0      	COM  R27
000487 9611      	ADIW R26,1
000488 f800      	BLD  R0,0
000489 9403      	INC  R0
00048a fa00      	BST  R0,0
                 __CHKSW2:
00048b 9508      	RET
                 
                 __GETW1P:
00048c 91ed      	LD   R30,X+
00048d 91fc      	LD   R31,X
00048e 9711      	SBIW R26,1
00048f 9508      	RET
                 
                 __GETW1PF:
000490 9005      	LPM  R0,Z+
000491 91f4      	LPM  R31,Z
000492 2de0      	MOV  R30,R0
000493 9508      	RET
                 
                 __PUTPARD1:
000494 937a      	ST   -Y,R23
000495 936a      	ST   -Y,R22
000496 93fa      	ST   -Y,R31
000497 93ea      	ST   -Y,R30
000498 9508      	RET
                 
                 __SAVELOCR6:
000499 935a      	ST   -Y,R21
                 __SAVELOCR5:
00049a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00049b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00049c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00049d 931a      	ST   -Y,R17
00049e 930a      	ST   -Y,R16
00049f 9508      	RET
                 
                 __LOADLOCR6:
0004a0 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0004a1 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0004a2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0004a3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0004a4 8119      	LDD  R17,Y+1
0004a5 8108      	LD   R16,Y
0004a6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  28 r1 :   8 r2 :   0 r3 :   0 r4 :  11 r5 :   5 r6 :  11 r7 :   4 
r8 :   8 r9 :   1 r10:   6 r11:   2 r12:   3 r13:   1 r14:   0 r15:   6 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  25 r25:   7 r26: 152 r27:  52 r28:  14 r29:   1 r30: 251 r31:  84 
x  :  25 y  : 189 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  11 
adiw  :  29 and   :   0 andi  :   9 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  17 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  48 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   1 bst   :   1 call  :  63 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  17 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   5 cpc   :  14 cpi   :  48 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   8 inc   :   1 jmp   :  24 ld    :  40 ldd   :  75 ldi   : 130 
lds   :   5 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  19 movw  :  40 
mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   3 
ori   :   8 out   :  20 pop   :   1 push  :   1 rcall :  30 ret   :  33 
reti  :   1 rjmp  :  77 rol   :   4 ror   :   0 sbc   :   4 sbci  :   2 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :  19 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  71 std   :  31 sts   :  15 sub   :   3 subi  :  18 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00094e   2284     98   2382   32768   7.3%
[.dseg] 0x000060 0x0002a9      0     73     73    2048   3.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 12 warnings
